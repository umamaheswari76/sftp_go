// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/grpcrw.proto

package sftp_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcRwServiceClient is the client API for GrpcRwService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcRwServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (GrpcRwService_UploadClient, error)
}

type grpcRwServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcRwServiceClient(cc grpc.ClientConnInterface) GrpcRwServiceClient {
	return &grpcRwServiceClient{cc}
}

func (c *grpcRwServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (GrpcRwService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcRwService_ServiceDesc.Streams[0], "/grpc_rw.GrpcRwService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcRwServiceUploadClient{stream}
	return x, nil
}

type GrpcRwService_UploadClient interface {
	Send(*FileUploadRequest) error
	CloseAndRecv() (*FileUploadResponse, error)
	grpc.ClientStream
}

type grpcRwServiceUploadClient struct {
	grpc.ClientStream
}

func (x *grpcRwServiceUploadClient) Send(m *FileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcRwServiceUploadClient) CloseAndRecv() (*FileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcRwServiceServer is the server API for GrpcRwService service.
// All implementations must embed UnimplementedGrpcRwServiceServer
// for forward compatibility
type GrpcRwServiceServer interface {
	Upload(GrpcRwService_UploadServer) error
	mustEmbedUnimplementedGrpcRwServiceServer()
}

// UnimplementedGrpcRwServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcRwServiceServer struct {
}

func (UnimplementedGrpcRwServiceServer) Upload(GrpcRwService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedGrpcRwServiceServer) mustEmbedUnimplementedGrpcRwServiceServer() {}

// UnsafeGrpcRwServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcRwServiceServer will
// result in compilation errors.
type UnsafeGrpcRwServiceServer interface {
	mustEmbedUnimplementedGrpcRwServiceServer()
}

func RegisterGrpcRwServiceServer(s grpc.ServiceRegistrar, srv GrpcRwServiceServer) {
	s.RegisterService(&GrpcRwService_ServiceDesc, srv)
}

func _GrpcRwService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcRwServiceServer).Upload(&grpcRwServiceUploadServer{stream})
}

type GrpcRwService_UploadServer interface {
	SendAndClose(*FileUploadResponse) error
	Recv() (*FileUploadRequest, error)
	grpc.ServerStream
}

type grpcRwServiceUploadServer struct {
	grpc.ServerStream
}

func (x *grpcRwServiceUploadServer) SendAndClose(m *FileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcRwServiceUploadServer) Recv() (*FileUploadRequest, error) {
	m := new(FileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcRwService_ServiceDesc is the grpc.ServiceDesc for GrpcRwService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcRwService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_rw.GrpcRwService",
	HandlerType: (*GrpcRwServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _GrpcRwService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/grpcrw.proto",
}
